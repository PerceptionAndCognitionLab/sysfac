mse[[4]]$"Mean Sq"
mse=(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))[["Mean Sq"]]
msw
mse
mse=(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
mse
summary(mse)
mse=(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))[[1]]
mse
mse=(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
mse[[4]]
mse[[5]]
mse[[4]]
mse[[7]]
mse[[6]]
mse[[5]]
mse=sumarry(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
mse=sumary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
mse=summary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
mse[[1]][[1]][[1]][[3]]
mse[[1]][[1]][[1]]
mse[[4]][[1]][[1]]
mse[[4]]
mse[[4]][[1]][[2]]
mse[[4]][[1]][[3]]
mse[[4]][[1]][[3]][2]
temp=(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))[["Mean Sq"]]
se=sqrt(temp[[4]][[1]][[3]][2]/I)
se
temp=summary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))[["Mean Sq"]]
se=sqrt(temp[[4]][[1]][[3]][2]/I)
se
temp
temp=summary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))[["Mean Sq"]]
temp
temp=summary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))
temp
temp=summary(aov(rt~sizeChange*angleChange+Error(sub/(sizeChange*angleChange)),data=aovDat))#
    se=sqrt(temp[[4]][[1]][[3]][2]/I)
se
I
.650/I
sqrt(.650/I)
y
tapply(y,list(a,b,sub),var)
mean(tapply(y,list(a,b,sub),var))
sqrt(mean(tapply(y,list(a,b,sub),var)))
sqrt(mean(tapply(y,list(a,b,sub),var))/I)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle",...)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)-se,1:I,t(mrt)+se,code=3,angle=90,length=.1)
mrt
arrows(1:2,t(mrt)-se,1:I,t(mrt)+se,code=3,angle=90,length=.1)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[,1]-se,1:I,t(mrt)[,1]+se,code=3,angle=90,length=.1)
arrows(1:2,t(mrt)-se,1:2,t(mrt)+se,code=3,angle=90,length=.1)
arrows(1:2,t(mrt)[,1]-se,1:I,t(mrt)[,1]+se,code=3,angle=90,length=.1)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[,1]-se,1:I,t(mrt)[,1]+se,code=3,angle=90,length=.1)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[,1]-se,1:2,t(mrt)[,1]+se,code=3,angle=90,length=.1)
tapply(y,list(a,b,sub),var)
hist(tapply(y,list(a,b,sub),var))
hist(tapply(y,list(a,b,sub),sd))
tapply(y,list(a,b,sub),var)
mean(tapply(y,list(a,b,sub),var))
mean(tapply(y,list(a,b,sub),var))/I
sqrt(mean(tapply(y,list(a,b,sub),var))/I)
tapply(y,list(a,b,sub),var)
tapply(y,list(a,b,sub),var)[1,1,]
mean(tapply(y,list(a,b,sub),var)[1,1,])/I
sqrt(mean(tapply(y,list(a,b,sub),var)[1,1,])/I)
sqrt(mean(tapply(y,list(a,b,sub),var)[1,2,])/I)
sqrt(mean(tapply(y,list(a,b,sub),var)[2,2,])/I)
sqrt(mean(tapply(y,list(a,b,sub),var)[2,1,])/I)
mrt
tapply(y,sub,mean)
tapply(y,list(sub,a,b),mean)-tapply(y,sub,mean)
tapply(y,list(a,b,sub),mean)-tapply(y,sub,mean)
tapply(y,list(a,b,sub),mean)
tapply(y,list(sub,a,b),mean)
tapply(y,list(sub,a,b),mean)-tapply(y,sub,mean)
tapply(y,list(a,b,sub),mean)
m=tapply(y,sub,mean)
m
mp=cbind(m,m,m)
mp
tapply(y,list(a,b,sub),mean)-mp
mp=cbind(m,m,m,m)
mp=array(cbind(m,m,m,m),dim=c(2,2,I))
mp
mp=array(rbind(m,m,m,m),dim=c(2,2,I))
mp
tapply(y,list(a,b,sub),mean)-mp
y
y-m[sub]
tapply(y-m[sub],list(a,b),var)
mean(tapply(y-m[sub],list(a,b),var))
mean(tapply(y-m[sub],list(a,b),var))/I
sqrt(mean(tapply(y-m[sub],list(a,b),var))/I)
se=sqrt(mean(tapply(y,list(a,b,sub),var))/I)
se
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle",...)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[,1]-se,1:2,t(mrt)[,2]+se,code=3,angle=90,length=.1)
arrows(1:2,t(mrt)[1,]-se,1:2,t(mrt)[1,]+se,code=3,angle=90,length=.1)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[1,]-se,1:2,t(mrt)[1,]+se,code=3,angle=90,length=.1)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[,1]-se,1:2,t(mrt)[,1]+se,code=3,angle=90,length=.1)
arrows(1:2,t(mrt)[,2]-se,1:2,t(mrt)[,2]+se,code=3,angle=90,length=.1)
library(papaja)
apaplot
?apa_lineplot
apa_lineplot(dat,sub,c(sizeChange,angleChange),rt)
apa_lineplot(dat,sub,c("sizeChange","angleChange"),rt)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt")
??apa_lineplot
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion='se')
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion="SE")
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=SE)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion="se")
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=2)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=1)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=conf_int)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=sd)
se= function(y) sqrt(mean(tapply(y,list(a,b,sub),var))/I)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt")
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
se= function(y,...) sqrt(mean(tapply(y,list(a,b,sub),var))/I)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
se= function(y) sqrt(mean(tapply(y,list(a,b,sub),var),na.rm=T)/I)
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
se
?se
se
rm(se)
se
apa_lineplot(dat,"sub",c("sizeChange","angleChange"),"rt",dispersion=se)
library(afex)
install.packages(afex)
install.packages("afex")
library(afex)
?aov_ez
aov_ez(sub,rt,dat,within=c(sizeChange,angleChange))
aov_ez(sub,rt,dat,within=c("sizeChange","angleChange"))
aov_ez(id="sub",dv="rt",dat,within=c("sizeChange","angleChange"))
se
y=dat$rt#
	sub=as.integer(as.factor(dat$sub))#
	a=dat$sizeChange-1#
	b=dat$angleChange-1#
	N=length(a)#
	I=max(sub)#
	mrt=tapply(y,list(a,b,sub),mean)
mrt
as.data.frame(mrt)
as.data.frame.table(mrt)
colnames(newDat)=c("size","angle","sub","rt")
newDat=as.data.frame.table(mrt)
colnames(newDat)=c("size","angle","sub","rt")
apa_lineplot(newDat,"sub",c("size","angle"),"rt",dispersion=se)
newDat
tapply(newdat,list(size,angle),var)
tapply(rt,list(size,angle),var,dat=newDat)
tapply(newDat$rt,list(newDat$size,newDat$angle),var)
tapply(newDat$rt,list(newDat$size,newDat$angle),se)
summary(aov(rt~size*ange+Error(sub/(size*angle),dat=newDat)))
summary(aov(rt~size*ange+Error(sub/(size*angle)),dat=newDat))
summary(aov(rt~size*angle+Error(sub/(size*angle)),dat=newDat))
0.015691/I
sqrt(0.015691/I)
aov_ez(id="sub",dv="rt",dat,within=c("sizeChange","angleChange"))
newDat
newDat$sub
s=as.integer(newDat$sub)
m=tapply(newDat$rt,newDat$sub,mean)
m
newDat$rt-m[s]
y=newDat$rt-m[s]
tapply(y,list(newDat$size,newDat$ange,newDat$sub),var)
tapply(y,list(newDat$size,newDat$angel),var)
tapply(y,list(newDat$size,newDat$angle),var)
mean(tapply(y,list(newDat$size,newDat$angle),var))/I
sqrt(mean(tapply(y,list(newDat$size,newDat$angle),var))/I)
se=sqrt(mean(tapply(y,list(newDat$size,newDat$angle),var))/I)
se
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle",...)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
dat=dat[dat$bothDiff==1,]#
	y=dat$rt#
	sub=as.integer(as.factor(dat$sub))#
	a=dat$sizeChange-1#
	b=dat$angleChange-1#
	N=length(a)#
	I=max(sub)#
	mrt=tapply(y,list(a,b,sub),mean)#
	newDat=as.data.frame.table(mrt)#
	colnames(newDat)=c("size","angle","sub","rt")#
	se=sqrt(mean(tapply(y,list(newDat$size,newDat$angle),var))/I)
se=sqrt(mean(tapply(newDat$rt,list(newDat$size,newDat$angle),var))/I)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle",...)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
mrt
mrt=tapply(newDat$rt,list(newDat$size,newDat$angle,mean)
)
mrt=tapply(newDat$rt,list(newDat$size,newDat$angle),mean)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[1,]-se,1:2,t(mrt)[1,]+se,code=9,angle=90)
arrows(1:2,t(mrt)[1,]-se,1:2,t(mrt)[1,]+se,code=3,angle=90)
se
se=sqrt(mean(tapply(newDat$rt,list(newDat$size,newDat$angle),var))/I)
se
dat=dat[dat$bothDiff==1,]
mrt=tapply(y,list(a,b,sub),mean)
newDat=as.data.frame.table(mrt)
colnames(newDat)=c("size","angle","sub","rt")
ao=summary(aov(rt~size*angle+Error(sub/(size*angle)),data=newDat))
av[[4]]
ao[[4]]
ao[[4]][[1]][[1][[3]]]
ao[[4]][[1]]
ao[[4]][[1]][[3]]
ao[[4]][[1]][[3]][2]
library('BayesFactor')#
library('MCMCpack')#
#
clean.s2=function()#
{#
inDat=read.table(url('https://raw.githubusercontent.com/PerceptionCognitionLab/data1/master/sysfactorial/SysFac02/SysFac02.all'))#
#
names=c("sub","trial","block","trialBlock","sizeChange","angleChange","changeType","bothDiff",#
"size1","angle1","size2","angle2","resp","acc","rt","bad","badCount",#
"tS","tF","tT","tB","tP","tR","percMem","feedback")#
colnames(inDat)=names#
#
bad1 = inDat$sub %in% c(4,21,33)#
bad2 = inDat$rt<.3 | inDat$rt>5#
bad3 = inDat$block==0#
bad4 = inDat$acc==0#
bad=(bad1 | bad2 | bad3 |bad4)#
return(inDat[!bad,])	#
}
dat=clean.s2()
dat=dat[dat$bothDiff==1,]#
	mrt=tapply(y,list(a,b,sub),mean)#
	newDat=as.data.frame.table(mrt)	#
	colnames(newDat)=c("size","angle","sub","rt")#
	ao=summary(aov(rt~size*angle+Error(sub/(size*angle)),data=newDat))#
	MSE= ao[[4]][[1]][[3]][2]#
	I=max(newDat$sub)#
	se=sqrt(MSE/I)
mrt=tapply(dat$rt,list(dat$sizeChange,dat$angleChange,dat$sub),mean)
newDat=as.data.frame.table(mrt)
colnames(newDat)=c("size","angle","sub","rt")
ao=summary(aov(rt~size*angle+Error(sub/(size*angle)),data=newDat))
MSE= ao[[4]][[1]][[3]][2]
I=max(newDat$sub)
newDat$sub
I=length(levels(dat$sub))
I
I=length(levels(newDat$sub))
I
se=sqrt(MSE/I)
se
mrt=tapply(newDat$rt,list(newDat$size,newDat$angle),mean)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle",...)
matplot(1:2,t(mrt),axes=F,ylab="Response Time (sec)",lty=1:2,lwd=2,col=c('black','darkblue'),typ='l',xlim=c(.9,2.1),xlab="Change in Angle")
arrows(1:2,t(mrt)[1,]-se,1:2,t(mrt)[1,]+se,code=3,angle=90)
arrows(1:2,t(mrt)[,1]-se,1:2,t(mrt)[,1]+se,code=3,angle=90)
source("/Users/jeff/git/sysfac/papers/current/figE2emp.R")
library('BayesFactor')#
library('MCMCpack')#
#
clean.s2=function()#
{#
inDat=read.table(url('https://raw.githubusercontent.com/PerceptionCognitionLab/data1/master/sysfactorial/SysFac02/SysFac02.all'))#
#
names=c("sub","trial","block","trialBlock","sizeChange","angleChange","changeType","bothDiff",#
"size1","angle1","size2","angle2","resp","acc","rt","bad","badCount",#
"tS","tF","tT","tB","tP","tR","percMem","feedback")#
colnames(inDat)=names#
#
bad1 = inDat$sub %in% c(4,21,33)#
bad2 = inDat$rt<.3 | inDat$rt>5#
bad3 = inDat$block==0#
bad4 = inDat$acc==0#
bad=(bad1 | bad2 | bad3 |bad4)#
return(inDat[!bad,])	#
}
dat=clean.s2()
dat=dat[dat$bothDiff==1,]#
	mrt=tapply(dat$rt,list(dat$sizeChange,dat$angleChange,dat$sub),mean)#
	newDat=as.data.frame.table(mrt)	#
	colnames(newDat)=c("size","angle","sub","rt")#
	ao=summary(aov(rt~size*angle+Error(sub/(size*angle)),data=newDat))
ao
ao[[2]][[1]][[2]]
ao[[4]][[1]][[2]]
ao[[4]][[1]][[2]][2]
ao[[4]][[1]][[1]][2]
SS=ao[[2]][[1]][[2]][2]+ao[[3]][[1]][[2]][2]+aoao[[4]][[1]][[2]][2]#
	df=ao[[2]][[1]][[1]][2]+ao[[3]][[1]][[1]][2]+aoao[[4]][[1]][[1]][2]#
	se=sqrt((SS/df)/I)
SS=ao[[2]][[1]][[2]][2]+ao[[3]][[1]][[2]][2]+ao[[4]][[1]][[2]][2]
df=ao[[2]][[1]][[1]][2]+ao[[3]][[1]][[1]][2]+ao[[4]][[1]][[1]][2]
se=sqrt((SS/df)/I)
I
I=length(levels(newDat$sub))
se=sqrt((SS/df)/I)
se
se*qt(.975,I-1)
source("/Users/jeff/git/sysfac/papers/current/figE1emp.R")
